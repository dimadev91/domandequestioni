[
  {"question": "What is the main advantage of using a `list comprehension` over a traditional `for` loop?", "options": ["It improves readability but is slower.", "It is more concise and generally faster for creating new lists.", "It can only be used with integers.", "It consumes more heap memory."], "correctIndex": 1},
  {"question": "What does the `yield` statement handle inside a Python function?", "options": ["It forces the exit from a loop.", "It turns the function into a generator.", "It raises a custom exception.", "It is an alias for the `return` statement."], "correctIndex": 1},
  {"question": "What is the correct way to define a read-only property in a Python class?", "options": ["Using `__slots__`.", "Using the `_private` attribute.", "Using the `@property` decorator without a setter.", "Declaring the attribute as `const`."], "correctIndex": 2},
  {"question": "What is the result of `print(type(lambda: None))`?", "options": ["<class 'function'>", "<class 'NoneType'>", "<class 'lambda'>", "Syntax Error"], "correctIndex": 0},
  {"question": "What is the mechanism by which Python manages memory (garbage collection)?", "options": ["Mark and Sweep and Stop and Copy.", "Automatic Reference Counting (ARC).", "Reference Counting and Generational Garbage Collection.", "Reference Counting only."], "correctIndex": 2},
  {"question": "Which of the following methods is called to create a class instance before `__init__`?", "options": ["__new__", "__call__", "__enter__", "__del__"], "correctIndex": 0},
  {"question": "What is the fundamental difference between using `is` and `==` in Python?", "options": ["They are equivalent for all data types.", "`is` checks object identity (same ID in memory), `==` checks value equality.", "`==` is faster than `is`.", "`is` is an assignment operator."], "correctIndex": 1},
  {"question": "Which data structure is optimized for element search and guarantees uniqueness?", "options": ["List", "Tuple", "Dictionary", "Set"], "correctIndex": 3},
  {"question": "What is the purpose of the built-in decorator `@classmethod`?", "options": ["To define a method that takes no arguments.", "To define a method that receives the class instance (`cls`) as the first argument.", "To define a method that belongs only to the object instance.", "To define a static method."], "correctIndex": 1},
  {"question": "What does the `super()` method do in a derived class?", "options": ["Calls the current class's constructor.", "Returns a proxy object that delegates calls to the parent's methods.", "Creates a new instance of the base class.", "Forces object destruction."], "correctIndex": 1},
  {"question": "What is the role of the `__init__.py` file in a Python directory?", "options": ["Defines the main function to run.", "Turns the directory into a Python package.", "Contains application configuration settings.", "It is only used for documentation initialization."], "correctIndex": 1},
  {"question": "What is the correct syntax to unpack all elements of a list as arguments to a function?", "options": ["function(my_list)", "function(*my_list)", "function(**my_list)", "function(my_list*)"], "correctIndex": 1},
  {"question": "What are 'dunder methods' (e.g., `__init__`) in Python?", "options": ["Private methods that should never be called.", "Methods that start with two underscores and are automatically called by the language to implement internal protocols.", "Utility methods for debugging.", "Static class methods."], "correctIndex": 1},
  {"question": "Which mechanism is used to implement 'polymorphism' in Python?", "options": ["Explicit interfaces (like in Java/C++).", "Virtual methods.", "Duck Typing.", "Type annotations."], "correctIndex": 2},
  {"question": "What is the purpose of the `else` block in a `try...except` statement?", "options": ["It runs if an exception occurs.", "It always runs, regardless of the exception.", "It runs if the `try` block completes without exceptions.", "It runs if the `finally` block fails."], "correctIndex": 2},
  {"question": "Which method is called when the subscription operator (`[]`) is used on an object?", "options": ["__add__", "__getattribute__", "__getitem__", "__index__"], "correctIndex": 2},
  {"question": "What is the main design problem that 'context managers' (using `with`) solve?", "options": ["They manage concurrency.", "They ensure that external resources (files, connections) are released automatically, even if an exception occurs.", "They implement the Singleton pattern.", "They reduce memory usage."], "correctIndex": 1},
  {"question": "What does the variable `_` represent in Python (when used as a variable name)?", "options": ["A read-only system variable.", "A variable used to store the last result in an interactive session or a placeholder for a value we don't care about.", "A private variable that cannot be modified.", "A reference to the parent class."], "correctIndex": 1},
  {"question": "What is the main performance difference between a `tuple` and a `list`?", "options": ["Tuples are inherently slower than lists.", "Tuples are immutable and therefore often faster (especially for access and use as dictionary keys).", "Lists are immutable, tuples are not.", "There is no significant performance difference."], "correctIndex": 1},
  {"question": "What is the meaning of the single asterisk (`*args`) in a function definition?", "options": ["Accepts an arbitrary number of positional arguments (as a tuple).", "Accepts an arbitrary number of keyword arguments (as a dictionary).", "It is used to force the argument to be an iterable.", "Declares an optional argument."], "correctIndex": 0},
  {"question": "Which of these is a standard Python library for interacting with SQL databases?", "options": ["SQLAlchemy", "MySQLdb", "psycopg2", "sqlite3"], "correctIndex": 3},
  {"question": "What is the purpose of the `@staticmethod` decorator?", "options": ["Defines a method that receives the class instance (`cls`).", "Defines a method that takes neither the class instance nor the object instance as the first argument.", "Defines a method for accessing static variables.", "Creates a method that can be overridden."], "correctIndex": 1},
  {"question": "Which built-in function is used to check if an object is iterable?", "options": ["isiterable()", "hasattr(obj, '__iter__')", "check_iterable()", "all()"], "correctIndex": 1},
  {"question": "What does the `map()` function return in Python 3?", "options": ["A list.", "A generator (map object).", "A dictionary.", "A tuple."], "correctIndex": 1},
  {"question": "How can you prevent the dynamic creation of new attributes on a class instance (saving memory)?", "options": ["By using the `@sealed` decorator.", "By defining the `__slots__` dunder method.", "By making the class `final`.", "By setting `self.__dict__ = None`."], "correctIndex": 1},
  {"question": "Which of the following is a key feature of the 'Dependency Injection' pattern?", "options": ["Reducing coupling between classes.", "Ensuring a class has only one instance.", "Increasing multiple inheritance.", "Forcing the use of type hints."], "correctIndex": 0},
  {"question": "What does the `__repr__` dunder method do?", "options": ["It is used for the 'official' representation of an object, intended for debugging and developers.", "It is used for the 'user-friendly' representation by an end-user.", "It is called when the object is serialized.", "It handles type errors."], "correctIndex": 0},
  {"question": "What is the concept that allows Python to not require explicit type declarations (e.g., `int x = 5`)?", "options": ["Static Typing.", "Dynamic Typing.", "Strong Typing.", "Weak Typing."], "correctIndex": 1},
  {"question": "Which built-in method is typically used to execute Python code when a module is imported?", "options": ["main()", "run()", "__name__ == '__main__'", "execute()"], "correctIndex": 2},
  {"question": "What is the purpose of the walrus operator (`:=`) introduced in Python 3.8?", "options": ["Default assignment.", "Assignment of a variable within an expression.", "Strict equality operator.", "Type casting operator."], "correctIndex": 1},
  {"question": "Which is the standard Python module for HTTP requests?", "options": ["requests", "urllib3", "httpx", "http.client"], "correctIndex": 3},
  {"question": "Which built-in function is used to sort a list immutably (returning a new list)?", "options": ["list.sort()", "sorted()", "list.order()", "order()"], "correctIndex": 1},
  {"question": "What is the main disadvantage of using multiple inheritance in Python?", "options": ["It is not supported.", "It creates overly long classes.", "Risk of 'Diamond Problem' and increased complexity.", "It makes the code harder to test."], "correctIndex": 2},
  {"question": "What is the fundamental concept behind the `asyncio` library?", "options": ["Parallelism.", "Cooperative Concurrency.", "Multiprocessing.", "Thread pooling."], "correctIndex": 1},
  {"question": "Which dunder method allows an object to be made callable?", "options": ["__new__", "__init__", "__call__", "__del__"], "correctIndex": 2},
  {"question": "What is the data type returned by the division operation (`/`) in Python 3, even if the operands are integers?", "options": ["int", "float", "double", "decimal"], "correctIndex": 1},
  {"question": "Which standard module is commonly used for serialization and deserialization of Python objects?", "options": ["json", "xml", "pickle", "yaml"], "correctIndex": 2},
  {"question": "Which of the following statements about Python is false?", "options": ["Python is an interpreted language.", "Python supports multiple inheritance.", "Python uses Just-In-Time (JIT) compilation by default.", "Python is strongly and dynamically typed."], "correctIndex": 2},
  {"question": "What exactly does the `extend()` method do to a Python list?", "options": ["Adds a single element to the end of the list.", "Adds all elements of an iterable to the end of the list.", "Removes the last elements of a list.", "Creates a shallow copy of the list."], "correctIndex": 1},
  {"question": "What is the purpose of the `@lru_cache` decorator?", "options": ["To cache the results of function calls with the same arguments.", "To ensure a function is executed only once.", "To make a function asynchronous.", "To clear all data from an object."], "correctIndex": 0},
  {"question": "What is the role of the `__iter__` dunder method?", "options": ["Defines how the object is constructed.", "Returns an iterator for the object, making it an iterable.", "Defines equality between objects.", "It is called upon object destruction."], "correctIndex": 1},
  {"question": "What happens when two keys in a Python dictionary are equal?", "options": ["An exception is raised.", "The value of the second key overwrites the value of the first.", "Both values are kept in a list.", "The dictionary converts to a list."], "correctIndex": 1},
  {"question": "What is the result of `print(10 // 3)`?", "options": ["3.333", "3", "4", "3.0"], "correctIndex": 1},
  {"question": "Which built-in function is used to create a sequence of numbers efficiently (generator)?", "options": ["list()", "sequence()", "range()", "iter()"], "correctIndex": 2},
  {"question": "What is the correct syntax for importing only a specific function from a module?", "options": ["import module.function", "import function from module", "from module import function", "import function"], "correctIndex": 2},
  {"question": "What is the purpose of the `__del__` dunder method?", "options": ["It is called upon object creation.", "It is called before the object is eliminated from memory (finalizer).", "It is only called in case of an exception.", "It deletes an attribute from the object."], "correctIndex": 1},
  {"question": "What is the name of the Python technique for checking an object's type based on its behavior and implemented methods?", "options": ["Static Typing", "Duck Typing", "Explicit Typing", "Weak Typing"], "correctIndex": 1},
  {"question": "Which decorator is used to define a method that takes neither `self` nor `cls` as an argument?", "options": ["@classmethod", "@property", "@staticmethod", "@abstractmethod"], "correctIndex": 2},
  {"question": "What is the function of the `pass` statement?", "options": ["It is used to terminate a loop.", "It is a placeholder that executes no operation, useful in empty blocks.", "It raises a compilation error.", "It ignores all subsequent lines."], "correctIndex": 1},
  {"question": "What are 'closures' in Python?", "options": ["Functions that take no arguments.", "Anonymous functions (lambda).", "Functions defined inside another function that remember the values of the outer function's local variables even after the outer function has finished executing.", "Static class methods."], "correctIndex": 2},
  {"question": "Which standard module offers classes to implement queues for communication between threads and processes?", "options": ["threading", "multiprocessing", "queue", "concurrent.futures"], "correctIndex": 2},
  {"question": "Which built-in function is used to iterate over two or more iterables in parallel?", "options": ["join()", "merge()", "zip()", "combine()"], "correctIndex": 2},
  {"question": "Which set operation removes elements present in the second set from the first set?", "options": ["union()", "intersection()", "difference()", "symmetric_difference()"], "correctIndex": 2},
  {"question": "What is the method to directly access the dictionary of attributes of a class instance?", "options": ["instance.attrs", "instance.__dict__", "instance.attributes", "instance.get_attrs()"], "correctIndex": 1},
  {"question": "Which operator is used for string concatenation in a more performant way than `+` in a loop?", "options": ["*", "-", "","join()", "#"], "correctIndex": 2},
  {"question": "What do you get by unpacking a dictionary with the double asterisk operator (`**`) as a function argument?", "options": ["A tuple of values.", "A tuple of keys.", "Keyword arguments.", "Positional arguments."], "correctIndex": 2},
  {"question": "What is the scoping difference between `global` and `nonlocal`?", "options": ["They are identical.", "`global` refers to the variable in the module, `nonlocal` refers to the variable in the closest enclosing function (non-global).", "`nonlocal` is for classes, `global` for functions.", "`global` is for constants, `nonlocal` for variables."], "correctIndex": 1},
  {"question": "Which standard module is essential for creating simple Command Line Interfaces (CLIs)?", "options": ["os", "sys", "argparse", "subprocess"], "correctIndex": 2},
  {"question": "What is the main reason for avoiding the use of global variables?", "options": ["They slow down code execution.", "They make the code less readable and increase side effects.", "They always cause memory leaks.", "They are only available in debug mode."], "correctIndex": 1},
  {"question": "Which dunder method is called when the `len()` function is used on an object?", "options": ["__size__", "__count__", "__length__", "__len__"], "correctIndex": 3},
  {"question": "Which of the following is a mutable data type in Python?", "options": ["Tuple", "String", "List", "FrozenSet"], "correctIndex": 2},
  {"question": "What is the purpose of the `classmethod` method?", "options": ["Defines a method that operates on the class instance, not the object instance.", "Creates a new object.", "It is used for inheritance.", "Manages object destruction."], "correctIndex": 0},
  {"question": "What does the `popitem()` method do on a Python dictionary?", "options": ["Removes and returns an arbitrary item (LIFO first in Python >= 3.7).", "Removes the item with the smallest key.", "Removes the item with the largest value.", "Adds a new item to the dictionary."], "correctIndex": 0},
  {"question": "What is the main characteristic of a 'set' in Python?", "options": ["It is ordered.", "It allows duplicate keys.", "It contains only immutable elements.", "It is an unordered collection of unique elements."], "correctIndex": 3},
  {"question": "Which standard module in Python is used for working with file systems and directories (e.g., creating folders, changing permissions)?", "options": ["sys", "pathlib", "io", "math"], "correctIndex": 1},
  {"question": "What do you get by using the multiplication operator (`*`) on a string (e.g., `'a' * 3`)?", "options": ["'a', 'a', 'a'", "['a', 'a', 'a']", "'aaa'", "3"], "correctIndex": 2},
  {"question": "What is the purpose of the `__exit__` dunder method in a context manager?", "options": ["It is called at the beginning of the `with` block.", "It is called at the end of the `with` block, even if an exception occurs, to clean up resources.", "It handles type errors.", "It defines the equality operator."], "correctIndex": 1},
  {"question": "What is the function of the `os` module?", "options": ["Manages console input/output.", "Provides an interface with the underlying operating system (environment variables, file system, etc.).", "It is the main library for networking.", "Implements asynchronous programming."], "correctIndex": 1},
  {"question": "Which built-in function is used to create an enumerated object (index-value pairs) from an iterable?", "options": ["enumerate()", "zip()", "iter()", "list()"], "correctIndex": 0},
  {"question": "What are 'named tuples' and what are they used for?", "options": ["Tuples that cannot be modified.", "They are a lighter alternative to dictionaries or classes for simple objects with named attributes.", "They are only used for dictionary keys.", "They are tuples that contain only strings."], "correctIndex": 1},
  {"question": "In Python, what is meant by 'Monkey Patching'?", "options": ["Fixing bugs in an unconventional way.", "Modifying or extending classes or modules at runtime, often to replace third-party methods.", "Applying a security patch.", "Using multiple inheritance."], "correctIndex": 1},
  {"question": "What is the difference between `append()` and `extend()` on lists?", "options": ["None, they are identical.", "`append()` adds a single element, `extend()` adds the elements of an iterable.", "`extend()` is faster than `append()`.", "`append()` only works with numbers."], "correctIndex": 1},
  {"question": "What is the main advantage of using a 'set' over a list for checking element membership?", "options": ["The set is ordered.", "Membership (`in`) is much faster due to hashing (O(1) time on average).", "Sets support duplicate elements.", "Sets are mutable."], "correctIndex": 1},
  {"question": "What is the output of `print('hello'[:: -1])`?", "options": ["'olleh'", "Slicing error.", "['h', 'e', 'l', 'l', 'o']", "'h'"], "correctIndex": 0},
  {"question": "Which built-in function is used to calculate the square of a number?", "options": ["sq()", "pow(x, 2)", "math.square()", "sqrt()"], "correctIndex": 1},
  {"question": "What is the Python equivalent of an interface (as in Java/C#)?", "options": ["Abstract Base Classes (ABC) from the `abc` module.", "A `.pyi` file.", "A protocol.", "A named tuple."], "correctIndex": 0},
  {"question": "What does the `strip()` method do to a string?", "options": ["Removes all whitespace and specified characters from the start and end of the string.", "Converts the string to a set.", "Capitalizes the first letter.", "Adds whitespace to the start and end."], "correctIndex": 0},
  {"question": "What is the purpose of the `__lt__` (less than) dunder method?", "options": ["Defines equality.", "Defines ordering (e.g., what happens when `a < b`).", "Defines the subtraction operator.", "It is called for the object's length."], "correctIndex": 1},
  {"question": "What is the method to access an attribute that does not exist, to implement a default behavior?", "options": ["__getattribute__", "__getattr__", "__setattr__", "__call__"], "correctIndex": 1},
  {"question": "What is the performance difference between iterating over a `list` and a `generator`?", "options": ["They are identical.", "The generator is more memory efficient (does not calculate all values in advance).", "The list is always faster.", "The generator is slower and consumes more memory."], "correctIndex": 1},
  {"question": "What is the main problem solved by the `Global Interpreter Lock (GIL)`?", "options": ["It prevents race conditions on Python's memory management (Reference Counting).", "It allows the parallel execution of pure Python code on multiple cores.", "It limits the use of C libraries.", "It makes the code slower."], "correctIndex": 0},
  {"question": "Which standard module is used for unit testing in Python?", "options": ["pytest", "unittest", "nose", "tox"], "correctIndex": 1},
  {"question": "What is the result of `print([1, 2, 3] * 2)`?", "options": ["[1, 2, 3, 1, 2, 3]", "[2, 4, 6]", "Multiplication error.", "6"], "correctIndex": 0},
  {"question": "What is the purpose of the `__hash__` dunder method?", "options": ["It allows an object to be used as a dictionary key or a set member.", "It defines equality between objects.", "It is called when the object is printed.", "It is called to calculate the length."], "correctIndex": 0},
  {"question": "Which standard module is typically used for data analysis and manipulation of multi-dimensional arrays?", "options": ["pandas", "matplotlib", "scikit-learn", "numpy"], "correctIndex": 3},
  {"question": "What is the concept that describes when an object is eligible for garbage collection?", "options": ["When it exceeds a certain size.", "When its reference count is zero.", "After a preset time.", "When `del` is called."], "correctIndex": 1},
  {"question": "Which dunder method is called when the addition operator (`+`) is used?", "options": ["__sum__", "__add__", "__join__", "__combine__"], "correctIndex": 1},
  {"question": "Which module is commonly used to handle command line input with UNIX-like syntax (e.g., `ls -l`)?", "options": ["argparse", "sys", "os", "subprocess"], "correctIndex": 0},
  {"question": "What is the main difference between `raise` and `assert`?", "options": ["They are identical.", "`raise` raises an exception, `assert` is used for assertions that, if false, raise an `AssertionError`.", "`assert` is only for debugging, `raise` for production.", "`raise` is faster."], "correctIndex": 1},
  {"question": "What is the meaning of the `__init_subclass__` dunder method?", "options": ["It is called upon instance initialization.", "It is called immediately after a subclass has been defined.", "It is called before `__new__`.", "It is only used for multiple inheritance."], "correctIndex": 1},
  {"question": "Which standard module allows the execution of external commands and interaction with their input/output?", "options": ["os", "sys", "subprocess", "cmd"], "correctIndex": 2},
  {"question": "Which statement is used to iterate over an iterator, but does not generate the entire sequence in memory?", "options": ["for", "while", "if", "with"], "correctIndex": 0},
  {"question": "Which data type CANNOT be used as a dictionary key?", "options": ["String", "Tuple", "List", "Integer"], "correctIndex": 2},
  {"question": "Which built-in function is used to convert an iterable into an iterator?", "options": ["list()", "iter()", "next()", "for()"], "correctIndex": 1},
  {"question": "Which standard module is for manipulating regular expressions?", "options": ["regex", "re", "string", "text"], "correctIndex": 1},
  {"question": "What is the purpose of a 'type hint' in Python (e.g., `def func(x: int) -> str:`)?", "options": ["To force the type at runtime.", "To provide suggestions for static code analysis tools (linters) and improve readability.", "It is a comment that is ignored.", "To make the code slower."], "correctIndex": 1},
  {"question": "What is the meaning of `Ellipsis` (`...`) in Python?", "options": ["It is a syntax error.", "It is a placeholder used to indicate that the code needs to be completed (often in type hints or numpy arrays).", "It is a concatenation operator.", "It forces object destruction."], "correctIndex": 1},
  {"question": "Which statement is used to exit a `for` or `while` loop prematurely?", "options": ["continue", "pass", "break", "return"], "correctIndex": 2},
  {"question": "Which standard module is used for formatting logs (debug and informational messages)?", "options": ["print", "logging", "debug", "trace"], "correctIndex": 1},
  {"question": "What is the output of `print(True + 1)`?", "options": ["2", "True1", "Type error.", "None"], "correctIndex": 0},
  {"question": "What is the purpose of the `__get__` dunder method (descriptor)?", "options": ["It is called when an attribute is accessed on an object, allowing the implementation of advanced properties.", "It is called to set an attribute.", "It is called to delete an attribute.", "It defines equality."], "correctIndex": 0},
  {"question": "Which built-in function is used to get the unique ID of an object in memory?", "options": ["type()", "id()", "ref()", "hash()"], "correctIndex": 1},
  {"question": "What is the syntax for defining an empty set?", "options": ["{} (curly braces)", "[] (square brackets)", "set()", "() (parentheses)"], "correctIndex": 2},
  {"question": "What is the main advantage of using a generator over a function that returns a list?", "options": ["Better readability.", "Lazy evaluation which reduces memory consumption.", "It is always faster.", "It cannot raise exceptions."], "correctIndex": 1},
  {"question": "What is the method to access a dictionary value with a key and specify a default value if the key does not exist?", "options": ["dict.get(key, default)", "dict[key] or default", "dict.setdefault(key, default)", "dict.find(key, default)"], "correctIndex": 0},
  {"question": "What is the difference between `slice()` and the slicing operator (`[]`)?", "options": ["The `[]` operator internally uses the `slice()` object and they are functionally equivalent.", "`slice()` is faster.", "`[]` can only be used with lists.", "`slice()` is deprecated."], "correctIndex": 0},
  {"question": "Which dunder method allows converting an object into a readable string (intended for the end-user)?", "options": ["__repr__", "__str__", "__unicode__", "__format__"], "correctIndex": 1},
  {"question": "Which module is commonly used for creating compressed files in ZIP format?", "options": ["os", "gzip", "zipfile", "shutil"], "correctIndex": 2},
  {"question": "What is the output of `print(1 == True)`?", "options": ["False", "True", "Comparison error.", "1"], "correctIndex": 1},
  {"question": "What is the purpose of the `__enter__` dunder method in a context manager?", "options": ["It is called at the end of the `with` block.", "It is called at the beginning of the `with` block and can return the object to be assigned to `as`.", "It handles exceptions.", "It defines the object's length."], "correctIndex": 1},
  {"question": "What does `list(range(5))` do?", "options": ["Creates a list with 5 random elements.", "Creates a list from 1 to 5.", "Creates a list from 0 to 4.", "Creates a tuple from 0 to 4."], "correctIndex": 2},
  {"question": "What is the main advantage of using a dictionary over a list in Python?", "options": ["It maintains the insertion order.", "It provides data access in O(1) time on average via keys (hashing).", "It supports duplicate elements.", "It is immutable."], "correctIndex": 1},
  {"question": "Which module is commonly used for generating random numbers?", "options": ["math", "rand", "random", "sys"], "correctIndex": 2},
  {"question": "What does the `__iadd__` dunder method (in-place addition) indicate?", "options": ["The `+` operator.", "The `+=` operator.", "The `is` operator.", "The `==` operator."], "correctIndex": 1},
  {"question": "What is the function of the `filter()` function?", "options": ["It applies a function to all elements of an iterable.", "It returns a generator containing only the elements for which the provided function returns True.", "It creates a new dictionary.", "It calculates the sum of the elements."], "correctIndex": 1},
  {"question": "Which standard module is recommended for manipulating file paths in a cross-platform and object-oriented way?", "options": ["os.path", "sys.path", "pathlib", "io"], "correctIndex": 2},
  {"question": "What is the output of `print('{} {}'.format('a', 'b'))`?", "options": ["'{} {}'", "'a', 'b'", "'a b'", "Formatting error."], "correctIndex": 2},
  {"question": "What is the main problem solved by the 'Singleton' pattern?", "options": ["Ensuring a class has only one instance and providing a global access point to it.", "Reducing multiple inheritance.", "Increasing execution speed.", "Managing garbage collection."], "correctIndex": 0},
  {"question": "What is the difference between `list()` and `list.copy()`?", "options": ["They are identical.", "`list()` creates a deep copy, `list.copy()` a shallow copy.", "Both create a shallow copy, but `list()` is also a constructor.", "`list.copy()` is deprecated."], "correctIndex": 2},
  {"question": "What is the role of the `__slots__` dunder method?", "options": ["It defines the class methods.", "It limits the attributes an instance can have, reducing the memory footprint.", "It is an array for static variables.", "It defines the ordering."], "correctIndex": 1},
  {"question": "Which data structure is the basis for data manipulation and analysis in Pandas?", "options": ["NumPy Array", "DataFrame", "Series", "Python List"], "correctIndex": 1},
  {"question": "What is the most efficient NumPy function for creating an array of all zeros?", "options": ["numpy.full(0)", "numpy.zeros()", "numpy.empty()", "numpy.zeroes()"], "correctIndex": 1},
  {"question": "Which Pandas method is used to inspect the first N rows of a DataFrame?", "options": ["df.info()", "df.head(N)", "df.describe()", "df.top(N)"], "correctIndex": 1},
  {"question": "In Pandas, what is meant by 'missing data' and how is it represented?", "options": ["Missing values, represented by 0.", "Missing values, represented by `NaN` (Not a Number).", "Missing values, represented by empty strings.", "Missing values, represented by `None`."], "correctIndex": 1},
  {"question": "Which Pandas selection technique is based on positional index (numeric)?", "options": ["loc[]", "iloc[]", "ix[]", "at[]"], "correctIndex": 1},
  {"question": "What is the main advantage of a NumPy Array over a Python list for numerical operations?", "options": ["Greater flexibility in data type.", "Vectorized operations and greater memory and speed efficiency.", "Support for string data types.", "Ease of debugging."], "correctIndex": 1},
  {"question": "Which Pandas method is used to fill missing values (`NaN`) in a DataFrame?", "options": ["df.dropna()", "df.fillna()", "df.replace()", "df.isna()"], "correctIndex": 1},
  {"question": "In Matplotlib, what is a 'Figure'?", "options": ["The main plot.", "The container for all graphical elements (Plot, Axes, Titles).", "A single line in a chart.", "The chart legend."], "correctIndex": 1},
  {"question": "Which function is used to join two DataFrames horizontally (columns) based on an index or a key?", "options": ["pd.join()", "pd.merge()", "pd.concat()", "pd.append()"], "correctIndex": 1},
  {"question": "Which property of a Pandas DataFrame returns a tuple representing (number of rows, number of columns)?", "options": ["df.size", "df.shape", "df.ndim", "df.len()"], "correctIndex": 1},
  {"question": "Which Pandas method groups data based on a column and applies an aggregate function (e.g., mean)?", "options": ["df.aggregate()", "df.groupby()", "df.pivot_table()", "df.unique()"], "correctIndex": 1},
  {"question": "What is the method to access DataFrame values using both the label (name) and the numeric index?", "options": ["df.at[]", "df.loc[]", "df.iloc[]", "df.get[]"], "correctIndex": 1},
  {"question": "Which type of chart is best to visualize the distribution of a single numerical variable (frequency)?", "options": ["Scatter plot", "Histogram", "Bar chart", "Pie chart"], "correctIndex": 1},
  {"question": "Which NumPy function is used to calculate the transpose matrix?", "options": ["numpy.transpose()", "numpy.invert()", "numpy.flip()", "numpy.T (attribute) or numpy.transpose()"], "correctIndex": 3},
  {"question": "What is the purpose of the `reset_index()` method of a Pandas DataFrame?", "options": ["Resets all values to zero.", "Turns the current index into a column and creates a new sequential numeric index.", "Removes duplicate columns.", "Reorders columns based on name."], "correctIndex": 1},
  {"question": "What does the parameter `axis=1` indicate in a Pandas DataFrame operation (e.g., `df.drop(..., axis=1)`)?", "options": ["The operation is applied to the rows.", "The operation is applied to the columns.", "The operation is applied to a specific level.", "The operation is applied only to the index."], "correctIndex": 1},
  {"question": "Which module is often recommended for advanced statistical visualization in Python, based on Matplotlib?", "options": ["Pandas.plot", "Plotly", "Seaborn", "Bokeh"], "correctIndex": 2},
  {"question": "What is the correct syntax for importing the Pandas library by convention?", "options": ["import pandas as p", "import pandas as pd", "import pandas as df", "import pandas as data"], "correctIndex": 1},
  {"question": "Which NumPy function is used to join two or more arrays along a specified axis?", "options": ["numpy.append()", "numpy.concatenate()", "numpy.join()", "numpy.merge()"], "correctIndex": 1},
  {"question": "What does the `value_counts()` function return on a Pandas Series?", "options": ["Calculates the sum of values.", "Returns a Series containing the count of unique values.", "Calculates the mean of values.", "Returns the minimum and maximum values."], "correctIndex": 1},
  {"question": "Which selection technique in Pandas is based on row and column labels (names)?", "options": ["iloc[]", "loc[]", "at[]", "ix[]"], "correctIndex": 1},
  {"question": "What is the most common method to convert a DataFrame column to a datetime format?", "options": ["pd.to_date()", "pd.to_datetime()", "df.astype('datetime')", "df.parse_dates()"], "correctIndex": 1},
  {"question": "Which type of chart is most appropriate for exploring the relationship (correlation) between two numerical variables?", "options": ["Box plot", "Scatter plot", "Line plot", "Violin plot"], "correctIndex": 1},
  {"question": "What does the advanced NumPy slicing operation `arr[:, 1]` return on a 2D array?", "options": ["The first row.", "The second column.", "The first column.", "The second row."], "correctIndex": 1},
  {"question": "Which Pandas method is used to eliminate rows that contain missing values (`NaN`)?", "options": ["df.fillna()", "df.dropna()", "df.replace()", "df.drop()"], "correctIndex": 1},
  {"question": "Which Pandas method is used to change the data type of a column (e.g., from object to int)?", "options": ["df.change_type()", "df.astype()", "df.convert_dtype()", "pd.cast()"], "correctIndex": 1},
  {"question": "Which technique is used to transform categorical variables into a numeric format (0 or 1) for analysis (e.g., machine learning)?", "options": ["Normalization", "Standardization", "One-Hot Encoding", "Binning"], "correctIndex": 2},
  {"question": "In Matplotlib, what is an 'Axes' (AxesSubplot)?", "options": ["The entire chart window.", "The chart drawing area, which contains the data and the X and Y axes.", "Only the X-axis.", "The legend."], "correctIndex": 1},
  {"question": "Which module is the core for scientific computing and supports linear algebra in Python?", "options": ["SciPy", "Pandas", "NumPy", "Matplotlib"], "correctIndex": 2},
  {"question": "Which Pandas method is used to apply a custom function to every element of a Series?", "options": ["df.map()", "df.apply()", "df.agg()", "df.transform()"], "correctIndex": 1},
  {"question": "Which NumPy function is used to calculate the standard deviation of an array?", "options": ["numpy.mean()", "numpy.std()", "numpy.var()", "numpy.stdev()"], "correctIndex": 1},
  {"question": "What is the main purpose of the `Series` object in Pandas?", "options": ["To store 2D tabular data.", "To store a 1D column of data with a labeled index.", "To store 3D arrays.", "To store temporal data."], "correctIndex": 1},
  {"question": "Which Pandas method returns descriptive statistics (count, mean, standard deviation, etc.)?", "options": ["df.info()", "df.describe()", "df.summary()", "df.stats()"], "correctIndex": 1},
  {"question": "Which parameter in the `pd.read_csv()` function is used to specify columns to be interpreted as dates?", "options": ["date_cols", "parse_dates", "date_format", "dtype"], "correctIndex": 1},
  {"question": "Which type of join in `pd.merge()` keeps all rows from the left DataFrame and matching rows from the right DataFrame?", "options": ["inner", "outer", "left", "right"], "correctIndex": 2},
  {"question": "What is the main problem solved by 'Broadcasting' in NumPy?", "options": ["It manages input/output.", "It allows efficient operations between arrays of different shapes/sizes.", "It handles type errors.", "It allows code to be executed in parallel."], "correctIndex": 1},
  {"question": "What does the `corr()` method do on a Pandas DataFrame?", "options": ["Calculates the sum of columns.", "Calculates the correlation matrix between numerical columns.", "Groups the data.", "Fills missing values."], "correctIndex": 1},
  {"question": "Which Pandas function is used to pivot a DataFrame?", "options": ["df.melt()", "df.pivot()", "df.stack()", "df.unstack()"], "correctIndex": 1},
  {"question": "What is the syntax for selecting all rows in a specific column using `loc[]`?", "options": ["df.loc[colonne, 'column_name']", "df.loc[:, 'column_name']", "df.loc['column_name', :]", "df.loc['column_name']"], "correctIndex": 1},
  {"question": "Which built-in Python function is used internally by Matplotlib for animating dynamic charts?", "options": ["matplotlib.animate()", "matplotlib.pyplot.animate()", "matplotlib.animation.FuncAnimation", "matplotlib.animation.Animate"], "correctIndex": 2},
  {"question": "Which Pandas method removes duplicate columns?", "options": ["df.drop_duplicates()", "df.unique_cols()", "df.drop_cols()", "df.transpose()"], "correctIndex": 0},
  {"question": "What is the main purpose of `pd.get_dummies()`?", "options": ["To generate random numbers.", "To convert categorical variables into dummy/indicator variables (One-Hot Encoding).", "To create an empty DataFrame.", "To remove missing values."], "correctIndex": 1},
  {"question": "What is the syntax for accessing the element at position (row 0, column 1) using NumPy indexing?", "options": ["arr[1, 0]", "arr[0][1]", "arr[0, 1]", "arr(0, 1)"], "correctIndex": 2},
  {"question": "Which Pandas method is used to iterate over the rows of a DataFrame (even if inefficient for large datasets)?", "options": ["df.iterrows()", "df.itercols()", "df.iterate()", "df.loop()"], "correctIndex": 0},
  {"question": "Which built-in function is used by Pandas and NumPy to convert an array to a standard Python list?", "options": ["listify()", "to_list()", "list()", "aslist()"], "correctIndex": 2},
  {"question": "What is the purpose of the `collections` module and, in particular, `Counter` in data analysis?", "options": ["To manage asynchronous operations.", "To provide a class for counting hashable objects (frequency).", "To create multi-dimensional arrays.", "To perform advanced statistical calculations."], "correctIndex": 1},
  {"question": "Which Pandas function is used to create a pivot table (similar to Excel)?", "options": ["df.groupby()", "df.pivot_table()", "df.merge()", "df.aggregate()"], "correctIndex": 1},
  {"question": "Which Matplotlib command is used to display the created plot?", "options": ["plt.draw()", "plt.show()", "plt.display()", "plt.render()"], "correctIndex": 1},
  {"question": "What is the meaning of a boolean index (mask) when selecting in a Pandas DataFrame?", "options": ["It selects all columns.", "It selects the rows where the corresponding boolean array is `True`.", "It removes rows with missing values.", "It is used for visualization."], "correctIndex": 1},
  {"question": "Which Pandas method is used to sort a DataFrame based on the values of one or more columns?", "options": ["df.sort_index()", "df.sort_values()", "df.order_by()", "df.reorder()"], "correctIndex": 1}
]